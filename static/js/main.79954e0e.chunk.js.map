{"version":3,"sources":["serviceWorker.ts","utils/notch.ts","核心/主题/主题.tsx","核心/主题/号码.ts","核心/主题/字体大小.ts","核心/主题/颜色.ts","utils/SettingsContext.ts","数据/数据.ts","组件/主标头/主标头.tsx","页面/字/字.tsx","页面/字表/字表.tsx","组件/字表组件/字表组件.tsx","页面/打印字表/打印字表.tsx","页面/打印部首/打印部首.tsx","页面/未找到页面/未找到页面.tsx","页面/首页/首页.tsx","核心/程序/程序.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","width","screen","height","pixelRatio","devicePixelRatio","notchHeight","document","documentElement","clientHeight","主题","号码","标头高度","字体大小","颜色","背景","SettingsContext","React","createContext","all","toggleAll","verbose","toggleVerbose","data","数据","ToggleContainer","样式","div","Toggle","button","按钮","Button","attrs","variant","容器","header","标题","h1","主标头","history","settings","useContext","pathname","onClick","goBack","push","styled","Container","Section","字","params","character","字对象","useMemo","i","length","radicals","j","strokeNumbers","k","characterGroup","characters","find","char","fluid","pinyins","join","radical","additionalStrokes","totalStrokes","translations","map","def","index","key","pinyin","definitions","definition","名称","p","无序列表","ul","VerboseList","列表项目","li","翻译","span","字表","部首","部首对象","rad","symbol","names","笔画数","strokeNumber","to","SmallText","字表组件","groups","additionalStrokesArray","filter","strokes","arr","indexOf","sort","a","b","groupsLocal","forEach","num","currentChars","lastGroup","maxStrokes","minStrokes","group","打印字表","部首index","radIndex","charIndex","slice","reduce","accum","打印部首","未找到页面","首页","Page","程序","useState","setAll","setVerbose","JSON","parse","stringify","s","r","n","c","common","some","Provider","value","path","component","exact","ReactDOM","render","StrictMode","theme","basename","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.79954e0e.chunk.js","sourcesContent":["/* eslint-disable no-console */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const width = window.screen.width;\nconst height = window.screen.height;\nconst pixelRatio = window.devicePixelRatio;\nconst pwaMode = height - document.documentElement.clientHeight < 50;\n\nexport const hasNotch =\n  pwaMode && // iPhone XR\n  ((width === 414 && height === 896 && pixelRatio === 2) ||\n    // iPhone X/XS\n    (width === 375 && height === 812 && pixelRatio === 3) ||\n    // iPhone XS Max\n    (width === 414 && height === 896 && pixelRatio === 3));\n\nexport const notchHeight = hasNotch ? 2 : 0; //rem\n","import 号码 from \"./号码\";\nimport 字体大小 from \"./字体大小\";\nimport 颜色 from \"./颜色\";\n\nconst 主题 = {\n  号码,\n  字体大小,\n  颜色\n};\n\nexport default 主题;\n","import { notchHeight } from \"../../utils/notch\";\n\nconst 号码 = {\n  标头高度: `${5 + notchHeight}rem`\n};\n\nexport default 号码;\n","const 字体大小 = {};\n\nexport default 字体大小;\n","const 颜色 = {\n  背景: \"black\"\n};\n\nexport default 颜色;\n","import React from \"react\";\nimport { IRadicalsByStrokeNumber } from \"../数据\";\n\nexport interface SettingsContextValues {\n  all: boolean;\n  toggleAll: () => void;\n  verbose: boolean;\n  toggleVerbose: () => void;\n  data: IRadicalsByStrokeNumber[];\n}\n\nconst SettingsContext = React.createContext<SettingsContextValues>({\n  all: false,\n  toggleAll: () => {},\n  verbose: false,\n  toggleVerbose: () => {},\n  data: []\n});\n\nexport default SettingsContext;\n","import 数据 from \"./数据.json\";\n\nexport interface ICharacter {\n  character: string;\n  pinyins: string[];\n  definitions: string[][];\n  translations: string[];\n  radical: string;\n  additionalStrokes: number;\n  totalStrokes: number;\n  common: boolean;\n}\n\ninterface IStrokeNumber {\n  strokeNumber: number;\n  characters: ICharacter[];\n}\n\ninterface IRadical {\n  symbol: string;\n  names: string[];\n  common: boolean;\n  strokeNumbers: IStrokeNumber[];\n  index?: number;\n}\n\nexport interface IRadicalsByStrokeNumber {\n  strokeNumber: number;\n  radicals: IRadical[];\n}\n\nexport default 数据 as IRadicalsByStrokeNumber[];\n","import React, { useContext } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport 样式 from \"styled-components\";\nimport { notchHeight } from \"../../utils/notch\";\nimport SettingsContext from \"../../utils/SettingsContext\";\n\nconst 主标头: React.FC<RouteComponentProps> = ({ history, location }) => {\n  const settings = useContext(SettingsContext);\n\n  return (\n    <容器>\n      {location.pathname !== \"/\" && (\n        <按钮 onClick={() => history.goBack()}>⇦</按钮>\n      )}\n      <标题 onClick={() => history.push(\"/\")}>汉字</标题>\n      <ToggleContainer>\n        <Toggle onClick={() => settings.toggleAll()}>\n          {settings.all ? \"All\" : \"Common\"}\n        </Toggle>\n        <Toggle onClick={() => settings.toggleVerbose()}>\n          {settings.verbose ? \"Verbose\" : \"Compact\"}\n        </Toggle>\n      </ToggleContainer>\n    </容器>\n  );\n};\n\nconst ToggleContainer = 样式.div`\n  grid-area: right;\n  display: grid;\n  grid-gap: 1rem;\n`;\n\nconst Toggle = 样式.button`\n  font-size: 0.5rem;\n  width: 3rem;\n  display: flex;\n  justify-content: center;\n`;\n\nconst 按钮 = 样式(Button).attrs({\n  variant: \"link\"\n})`\n  color: white;\n  font-size: 2.5rem;\n  display: flex;\n  justify-content: center;\n\n  &:hover,\n  &:focus {\n    text-decoration: none;\n    color: white;\n    outline: none;\n    box-shadow: none;\n  }\n`;\n\nconst 容器 = 样式.header`\n  height: ${5 + notchHeight}rem;\n  padding-top: ${notchHeight}rem;\n  background: blue;\n  display: grid;\n  grid-template-columns: 4rem 1fr 4rem;\n  grid-template-areas: \"left center right\";\n  justify-items: center;\n  align-items: center;\n`;\n\nconst 标题 = 样式.h1`\n  grid-area: center;\n  cursor: pointer;\n\n  a {\n    color: white;\n  }\n`;\n\nexport default 主标头;\n","import React, { useMemo } from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport 数据 from \"../../数据\";\n\ninterface RouteParams {\n  character: string;\n}\n\nconst 字: React.FC<RouteComponentProps<RouteParams>> = ({ match }) => {\n  const { character: 字 } = match.params;\n\n  const 字对象 = useMemo(() => {\n    for (let i = 0; i < 数据.length; i++) {\n      const { radicals } = 数据[i];\n      for (let j = 0; j < radicals.length; j++) {\n        const { strokeNumbers } = radicals[j];\n        for (let k = 0; k < strokeNumbers.length; k++) {\n          const characters = strokeNumbers[k].characters;\n          const characterGroup = characters.find((char) => {\n            return char.character === 字;\n          });\n\n          if (characterGroup) return characterGroup;\n        }\n      }\n    }\n  }, [字]);\n\n  return (\n    <容器 fluid>\n      {字对象 ? (\n        <div>\n          <h2>{字对象.character}</h2>\n          <p>{字对象.pinyins.join(\", \")}</p>\n          <Section>\n            <p>部首：{字对象.radical}</p>\n            <p>部外：{字对象.additionalStrokes}</p>\n            <p>总笔画：{字对象.totalStrokes}</p>\n          </Section>\n          <br />\n\n          <h3>英文</h3>\n          <ul>\n            {字对象.translations.map((def, index) => (\n              <li key={index}>{def}</li>\n            ))}\n          </ul>\n\n          <br />\n          <h3>字义</h3>\n          {字对象.pinyins.map((pinyin, index) => (\n            <div key={index}>\n              <h4>{pinyin}</h4>\n              <>\n                <ul>\n                  {字对象.definitions[index].map((definition, index) => (\n                    <li key={index}>{definition}</li>\n                  ))}\n                </ul>\n              </>\n            </div>\n          ))}\n        </div>\n      ) : (\n        <p>未找到字</p>\n      )}\n    </容器>\n  );\n};\n\nconst 容器 = styled(Container)`\n  padding-top: 2rem;\n  padding-bottom: 2rem;\n  overflow: auto;\n`;\n\nconst Section = styled.div`\n  font-size: 1rem;\n\n  p {\n    margin-bottom: 0;\n  }\n`;\n\nexport default 字;\n","import React, { useMemo, useContext } from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport { RouteComponentProps, Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport SettingsContext from \"../../utils/SettingsContext\";\n\ninterface RouteParams {\n  radical: string;\n}\n\nconst 字表: React.FC<RouteComponentProps<RouteParams>> = ({ match }) => {\n  const { radical: 部首 } = match.params;\n\n  const settings = useContext(SettingsContext);\n\n  const 部首对象 = useMemo(() => {\n    for (let i = 0; i < settings.data.length; i++) {\n      const 部首对象 = settings.data[i].radicals.find((rad) => {\n        return rad.symbol === 部首;\n      });\n\n      if (部首对象) return 部首对象;\n    }\n  }, [settings.data, 部首]);\n\n  if (!部首对象) {\n    return (\n      <容器 fluid>\n        <p>未找到首部</p>\n      </容器>\n    );\n  }\n\n  return (\n    <容器 fluid>\n      <h2>{部首对象.symbol}</h2>\n      {部首对象.names.length > 0 && (\n        <名称>名称：{部首对象.names.join(\", \")}</名称>\n      )}\n      <br />\n      {部首对象.strokeNumbers.map((笔画数) => (\n        <section key={笔画数.strokeNumber}>\n          <h4>画{笔画数.strokeNumber}</h4>\n          {settings.verbose ? (\n            <VerboseList>\n              {笔画数.characters.map((字) => (\n                <列表项目 key={字.character}>\n                  <Link to={`/character/${字.character}`}>\n                    <strong>{字.character}</strong>\n                  </Link>\n                  : {字.pinyins.join(\", \")}: <翻译>{字.translations[0]}</翻译>\n                </列表项目>\n              ))}\n            </VerboseList>\n          ) : (\n            <无序列表>\n              {笔画数.characters.map((字) => (\n                <li key={字.character}>\n                  <Link to={`/character/${字.character}`}>\n                    <strong>{字.character}</strong>\n                  </Link>\n                </li>\n              ))}\n            </无序列表>\n          )}\n        </section>\n      ))}\n    </容器>\n  );\n};\n\nconst 容器 = styled(Container)`\n  padding-top: 2rem;\n  padding-bottom: 2rem;\n  overflow: auto;\n`;\n\nconst 名称 = styled.p`\n  margin-top: 1rem;\n  font-size: 1rem;\n`;\n\nconst 无序列表 = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(50px, 1fr));\n  padding: 0;\n  justify-items: center;\n\n  li {\n    padding: 0;\n    list-style-type: none;\n  }\n`;\n\nconst VerboseList = styled.ul`\n  padding-left: 0.5rem;\n`;\n\nconst 列表项目 = styled.li`\n  line-height: 1.25rem;\n  padding: 0.4rem 0;\n  list-style-type: none;\n`;\n\nconst 翻译 = styled.span`\n  font-size: 0.75rem;\n`;\n\nexport default 字表;\n","import React, { useMemo, Fragment } from \"react\";\nimport styled from \"styled-components\";\nimport { ICharacter } from \"../../数据\";\n\ninterface 字表组件Props {\n  characters: ICharacter[];\n}\n\ninterface CharacterGroup {\n  minStrokes: number;\n  maxStrokes: number;\n  characters: ICharacter[];\n}\n\nconst 字表组件: React.FC<字表组件Props> = ({ characters }) => {\n  const groups: CharacterGroup[] = useMemo(() => {\n    const additionalStrokesArray = characters\n      .map((char) => char.additionalStrokes)\n      .filter((strokes, index, arr) => arr.indexOf(strokes) === index)\n      .sort((a, b) => a - b);\n\n    const groupsLocal: CharacterGroup[] = [];\n\n    additionalStrokesArray.forEach((num) => {\n      const currentChars = characters.filter(\n        (char) => char.additionalStrokes === num\n      );\n\n      if (groupsLocal.length > 0) {\n        const lastGroup = groupsLocal[groupsLocal.length - 1];\n        if (\n          lastGroup.maxStrokes !== 0 &&\n          (lastGroup.characters.length + currentChars.length <= 6 ||\n            (lastGroup.characters.length <= 5 && currentChars.length <= 2) ||\n            (lastGroup.characters.length <= 2 && currentChars.length <= 5) ||\n            (lastGroup.characters.length <= 7 && currentChars.length <= 1) ||\n            (lastGroup.characters.length <= 1 && currentChars.length <= 7))\n        ) {\n          lastGroup.maxStrokes = num;\n          lastGroup.characters = [...lastGroup.characters, ...currentChars];\n          return;\n        }\n      }\n\n      groupsLocal.push({\n        minStrokes: num,\n        maxStrokes: num,\n        characters: characters.filter((char) => char.additionalStrokes === num)\n      });\n    });\n\n    return groupsLocal;\n  }, [characters]);\n\n  return (\n    <>\n      {groups.map((group, index) => (\n        <Fragment key={index}>\n          {characters.length >= 10 && group.maxStrokes > 0 && (\n            <h3>\n              画{group.minStrokes}\n              {group.minStrokes !== group.maxStrokes\n                ? `-${group.maxStrokes}`\n                : \"\"}\n            </h3>\n          )}\n          {group.characters.map((char) => (\n            <p key={char.character}>\n              {char.character}: {char.pinyins.join(\", \")}:{\" \"}\n              <SmallText>{char.translations.join(\"; \")}</SmallText>\n            </p>\n          ))}\n        </Fragment>\n      ))}\n    </>\n  );\n};\n\nconst SmallText = styled.span`\n  font-size: 0.75rem;\n`;\n\nexport default 字表组件;\n","import React, { useContext, Fragment } from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport SettingsContext from \"../../utils/SettingsContext\";\nimport { ICharacter } from \"../../数据\";\nimport 字表组件 from \"../../组件/字表组件\";\n\nconst 打印字表: React.FC<RouteComponentProps> = () => {\n  const settings = useContext(SettingsContext);\n\n  return (\n    <容器 fluid>\n      {settings.data.map((部首, 部首index) => (\n        <section key={部首.strokeNumber}>\n          {部首.radicals.map((radical, radIndex) => {\n            const charIndex =\n              radIndex +\n              1 +\n              settings.data\n                .slice(0, 部首index)\n                .reduce(\n                  (accum, strokeNumber) => accum + strokeNumber.radicals.length,\n                  0\n                );\n            const characters = radical.strokeNumbers.reduce(\n              (accum, strokeNumber) => {\n                return [...accum, ...strokeNumber.characters];\n              },\n              [] as ICharacter[]\n            );\n            return (\n              <Fragment key={radical.symbol}>\n                <h1>\n                  {charIndex}: {radical.symbol}\n                </h1>\n                <字表组件 characters={characters} />\n              </Fragment>\n            );\n          })}\n        </section>\n      ))}\n    </容器>\n  );\n};\n\nconst 容器 = styled(Container)`\n  padding-top: 2rem;\n  padding-bottom: 2rem;\n  overflow: auto;\n`;\n\nexport default 打印字表;\n","import React, { useContext } from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport SettingsContext from \"../../utils/SettingsContext\";\n\nconst 打印部首: React.FC<RouteComponentProps> = () => {\n  const settings = useContext(SettingsContext);\n  return (\n    <容器 fluid>\n      {settings.data.map((部首, 部首index) => (\n        <section key={部首.strokeNumber}>\n          <h3>画{部首.strokeNumber}</h3>\n          {部首.radicals.map((radical, radIndex) => {\n            const charIndex =\n              radIndex +\n              1 +\n              settings.data\n                .slice(0, 部首index)\n                .reduce(\n                  (accum, strokeNumber) => accum + strokeNumber.radicals.length,\n                  0\n                );\n            return (\n              <p key={radical.symbol}>\n                {charIndex}: {radical.symbol}\n              </p>\n            );\n          })}\n        </section>\n      ))}\n    </容器>\n  );\n};\n\nconst 容器 = styled(Container)`\n  padding-top: 2rem;\n  padding-bottom: 2rem;\n  overflow: auto;\n`;\n\nexport default 打印部首;\n","import React from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nconst 未找到页面: React.FC<RouteComponentProps> = () => (\n  <容器 fluid>\n    <h1>未找到页面</h1>\n  </容器>\n);\n\nconst 容器 = styled(Container)`\n  padding-top: 2rem;\n  padding-bottom: 2rem;\n`;\n\nexport default 未找到页面;\n","import React, { useContext } from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport { RouteComponentProps, Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport SettingsContext from \"../../utils/SettingsContext\";\n\nconst 首页: React.FC<RouteComponentProps> = ({ location }) => {\n  const settings = useContext(SettingsContext);\n  return (\n    <容器 fluid>\n      {settings.data.map((部首) => (\n        <section key={部首.strokeNumber}>\n          <h4>画{部首.strokeNumber}</h4>\n          <无序列表>\n            {部首.radicals.map((radical) => (\n              <li key={radical.symbol}>\n                <Link to={`/radical/${radical.symbol}`}>\n                  <strong>{radical.symbol}</strong>\n                </Link>\n              </li>\n            ))}\n          </无序列表>\n        </section>\n      ))}\n    </容器>\n  );\n};\n\nconst 容器 = styled(Container)`\n  padding-top: 2rem;\n  padding-bottom: 2rem;\n  overflow: auto;\n`;\n\nconst 无序列表 = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(50px, 1fr));\n  padding: 0;\n  justify-items: center;\n\n  li {\n    padding: 0;\n    list-style-type: none;\n  }\n`;\n\nexport default 首页;\n","import React, { useState, useMemo } from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport SettingsContext from \"../../utils/SettingsContext\";\nimport 数据, { IRadicalsByStrokeNumber } from \"../../数据\";\nimport 主标头 from \"../../组件/主标头\";\nimport 字 from \"../../页面/字\";\nimport 字表 from \"../../页面/字表\";\nimport 打印字表 from \"../../页面/打印字表\";\nimport 打印部首 from \"../../页面/打印部首\";\nimport 未找到页面 from \"../../页面/未找到页面\";\nimport 首页 from \"../../页面/首页\";\n\nconst 程序: React.FC = () => {\n  const [all, setAll] = useState(false);\n  const [verbose, setVerbose] = useState(false);\n  const toggleAll = () => setAll(!all);\n  const toggleVerbose = () => setVerbose(!verbose);\n\n  const data = useMemo(() => {\n    if (all) return 数据;\n    const data: IRadicalsByStrokeNumber[] = JSON.parse(JSON.stringify(数据));\n\n    data.forEach((s) => {\n      s.radicals.forEach((r) => {\n        r.strokeNumbers.forEach((n) => {\n          n.characters = n.characters.filter((c) => c.common);\n        });\n      });\n    });\n\n    data.forEach((s) => {\n      s.radicals.forEach((r) => {\n        r.strokeNumbers = r.strokeNumbers.filter((n) =>\n          n.characters.some((c) => c.common)\n        );\n      });\n    });\n\n    data.forEach((s) => {\n      s.radicals = s.radicals.filter((r) => r.common);\n    });\n\n    return data.filter((s) => s.radicals.length > 0);\n  }, [all]);\n\n  return (\n    <SettingsContext.Provider\n      value={{\n        all,\n        toggleAll,\n        verbose,\n        toggleVerbose,\n        data\n      }}\n    >\n      <Switch>\n        <Route path=\"/print-radicals\" component={打印部首} exact />\n        <Route path=\"/print-characters\" component={打印字表} exact />\n        <Route>\n          <Page>\n            <Switch></Switch>\n            <Route component={主标头} />\n            <Switch>\n              <Route path=\"/\" exact component={首页} />\n              <Route path=\"/radical/:radical\" exact component={字表} />\n              <Route path=\"/character/:character\" exact component={字} />\n              <Route component={未找到页面} />\n            </Switch>\n          </Page>\n        </Route>\n      </Switch>\n    </SettingsContext.Provider>\n  );\n};\n\nconst Page = styled.div`\n  overflow: hidden;\n  position: fixed;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport default 程序;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter as Router } from \"react-router-dom\";\nimport { ThemeProvider } from \"styled-components\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport 主题 from \"./核心/主题\";\nimport 程序 from \"./核心/程序\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={主题}>\n      <Router basename=\"/\">\n        <程序 />\n      </Router>\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}