{"version":3,"sources":["serviceWorker.ts","utils/notch.ts","核心/主题/主题.tsx","核心/主题/号码.ts","核心/主题/字体大小.ts","核心/主题/颜色.ts","组件/主标头/主标头.tsx","数据/数据.ts","页面/字/字.tsx","页面/字表/字表.tsx","页面/未找到页面/未找到页面.tsx","页面/首页/首页.tsx","核心/程序/程序.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","width","screen","height","pixelRatio","devicePixelRatio","notchHeight","document","documentElement","clientHeight","主题","号码","标头高度","字体大小","颜色","背景","按钮","样式","Button","attrs","variant","Padding","div","props","theme","固定","标头","header","标题","h1","主标头","history","useHistory","useLocation","pathname","onClick","goBack","push","数据","字","params","character","字对象","useMemo","i","length","radicals","j","strokeNumbers","k","characterGroup","characters","find","char","fluid","pinyins","join","radical","additionalStrokes","totalStrokes","translations","map","pinyin","index","definitions","definition","字表","部首","部首对象","rad","symbol","笔画数","key","strokeNumber","to","未找到页面","无序列表","styled","ul","首页","内容","程序","basename","path","exact","component","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.62a89ead.chunk.js","sourcesContent":["/* eslint-disable no-console */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const width = window.screen.width;\nconst height = window.screen.height;\nconst pixelRatio = window.devicePixelRatio;\nconst pwaMode = height - document.documentElement.clientHeight < 50;\n\nexport const hasNotch =\n  pwaMode &&\n  (// iPhone XR\n  (width === 414 && height === 896 && pixelRatio === 2) ||\n    // iPhone X/XS\n    (width === 375 && height === 812 && pixelRatio === 3) ||\n    // iPhone XS Max\n    (width === 414 && height === 896 && pixelRatio === 3));\n\nexport const notchHeight = hasNotch ? 2 : 0; //rem\n","import 号码 from \"./号码\";\nimport 字体大小 from \"./字体大小\";\nimport 颜色 from \"./颜色\";\n\nconst 主题 = {\n  号码,\n  字体大小,\n  颜色\n};\n\nexport default 主题;\n","import { notchHeight } from \"../../utils/notch\";\n\nconst 号码 = {\n  标头高度: `${5 + notchHeight}rem`\n};\n\nexport default 号码;\n","const 字体大小 = {};\n\nexport default 字体大小;\n","const 颜色 = {\n  背景: \"black\"\n};\n\nexport default 颜色;\n","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport { Link } from \"react-router-dom\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport 样式 from \"styled-components\";\nimport { notchHeight } from \"../../utils/notch\";\n\nconst 主标头 = () => {\n  let history = useHistory();\n  let location = useLocation();\n  return (\n    <>\n      <Padding />\n      <固定>\n        <标头>\n          {location.pathname !== \"/\" && (\n            <按钮 onClick={() => history.goBack()}>⇦</按钮>\n          )}\n          <标题 onClick={() => history.push(\"/\")}>汉字</标题>\n          {/* <按钮 onClick={() => history.goForward()}>⇨</按钮> */}\n        </标头>\n      </固定>\n    </>\n  );\n};\n\nconst 按钮 = 样式(Button).attrs({\n  variant: \"link\"\n})`\n  color: white;\n  font-size: 2.5rem;\n  display: flex;\n  justify-content: center;\n\n  &:hover,\n  &:focus {\n    text-decoration: none;\n    color: white;\n    outline: none;\n    box-shadow: none;\n  }\n`;\n\nconst Padding = 样式.div`\n  height: ${(props) => props.theme.号码.标头高度};\n`;\n\nconst 固定 = 样式.div`\n  height: ${(props) => props.theme.号码.标头高度};\n  background: blue;\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  padding-top: ${notchHeight}rem;\n`;\n\nconst 标头 = 样式.header`\n  height: 100%;\n  display: grid;\n  grid-template-columns: 4rem 1fr 4rem;\n  grid-template-areas: \"left center right\";\n  justify-items: center;\n  align-items: center;\n`;\n\nconst 标题 = 样式.h1`\n  grid-area: center;\n  color: white;\n`;\n\nexport default 主标头;\n","import 数据 from \"./数据.json\";\n\ninterface ICharacter {\n  character: string;\n  pinyins: string[];\n  definitions: string[][];\n  translations: string[];\n  radical: string;\n  additionalStrokes: number;\n  totalStrokes: number;\n}\n\ninterface IStrokeNumber {\n  strokeNumber: number;\n  characters: ICharacter[];\n}\n\ninterface IRadical {\n  symbol: string;\n  names: string[];\n  strokeNumbers: IStrokeNumber[];\n}\n\ninterface IRadicalsByStrokeNumber {\n  strokeNumber: number;\n  radicals: IRadical[];\n}\n\nexport default 数据 as IRadicalsByStrokeNumber[];\n","import React, { useMemo } from \"react\";\nimport 容器 from \"react-bootstrap/Container\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport 数据 from \"../../数据\";\n\ninterface RouteParams {\n  character: string;\n}\n\nconst 字: React.FC<RouteComponentProps<RouteParams>> = ({ match }) => {\n  const { character: 字 } = match.params;\n\n  const 字对象 = useMemo(() => {\n    for (let i = 0; i < 数据.length; i++) {\n      const { radicals } = 数据[i];\n      for (let j = 0; j < radicals.length; j++) {\n        const { strokeNumbers } = radicals[j];\n        for (let k = 0; k < strokeNumbers.length; k++) {\n          const characters = strokeNumbers[k].characters;\n          const characterGroup = characters.find((char) => {\n            return char.character === 字;\n          });\n\n          if (characterGroup) return characterGroup;\n        }\n      }\n    }\n  }, [字]);\n\n  return (\n    <容器 fluid>\n      {字对象 ? (\n        <div>\n          <h2>{字对象.character}</h2>\n          <p>{字对象.pinyins.join(\", \")}</p>\n          <p>部首：{字对象.radical}</p>\n          <p>部外：{字对象.additionalStrokes}</p>\n          <p>总笔画：{字对象.totalStrokes}</p>\n          <p>英文：{字对象.translations[0]}</p>\n\n          <br />\n          <h3>字义</h3>\n          {字对象.pinyins.map((pinyin, index) => (\n            <div>\n              <p>\n                <strong>{pinyin}</strong>\n              </p>\n              <>\n                <ul>\n                  {字对象.definitions[index].map((definition) => (\n                    <li>{definition}</li>\n                  ))}\n                </ul>\n              </>\n            </div>\n          ))}\n        </div>\n      ) : (\n        <p>未找到字</p>\n      )}\n    </容器>\n  );\n};\n\nexport default 字;\n","import React, { useMemo } from \"react\";\nimport 容器 from \"react-bootstrap/Container\";\nimport { RouteComponentProps, Link } from \"react-router-dom\";\nimport 数据 from \"../../数据\";\nimport 常见 from \"../../数据/常见\";\n\ninterface RouteParams {\n  radical: string;\n}\n\nconst 字表: React.FC<RouteComponentProps<RouteParams>> = ({\n  match,\n  location\n}) => {\n  const { radical: 部首 } = match.params;\n  // const 显示所有 = new URLSearchParams(location.search).get(\"all\") !== null;\n  const 显示所有 = true;\n\n  const 部首对象 = useMemo(() => {\n    for (let i = 0; i < 数据.length; i++) {\n      const 部首对象 = 数据[i].radicals.find((rad) => {\n        return rad.symbol === 部首;\n      });\n\n      if (部首对象) {\n        if (显示所有) return 部首对象;\n\n        const 部首对象副本 = {\n          ...部首对象\n        };\n\n        部首对象副本.strokeNumbers = 部首对象副本.strokeNumbers\n          .map((strokeNumber) => ({\n            ...strokeNumber,\n            characters: strokeNumber.characters.filter((char) =>\n              常见(char.character)\n            )\n          }))\n          .filter((strokeNumber) => strokeNumber.characters.length > 0);\n\n        return 部首对象副本;\n      }\n    }\n  }, [部首, 显示所有]);\n\n  return (\n    <容器 fluid>\n      {部首对象 ? (\n        <div>\n          <h2>{部首对象.symbol}</h2>\n          <br />\n          {部首对象.strokeNumbers.map((笔画数) => (\n            <div key={笔画数.strokeNumber}>\n              <p>画{笔画数.strokeNumber}</p>\n              <ul>\n                {笔画数.characters.map((字) => (\n                  <li key={字.character}>\n                    <strong>\n                      <Link to={`/character/${字.character}`}>\n                        {字.character}\n                      </Link>\n                      : {字.pinyins.join(\", \")}\n                    </strong>\n                    : {字.translations[0]}\n                  </li>\n                ))}\n              </ul>\n            </div>\n          ))}\n        </div>\n      ) : (\n        <p>未找到首部</p>\n      )}\n    </容器>\n  );\n};\n\nexport default 字表;\n","import React from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\n\nconst 未找到页面: React.FC<RouteComponentProps> = () => <h1>未找到页面</h1>;\n\nexport default 未找到页面;\n","import React from \"react\";\nimport 容器 from \"react-bootstrap/Container\";\nimport { RouteComponentProps, Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport 数据 from \"../../数据\";\n\nconst 首页: React.FC<RouteComponentProps> = () => {\n  return (\n    <容器 fluid>\n      {数据.map((部首) => (\n        <div key={部首.strokeNumber}>\n          <p>画{部首.strokeNumber}</p>\n          <无序列表>\n            {部首.radicals.map((radical) => (\n              <li key={radical.symbol}>\n                <Link to={`/radical/${radical.symbol}`}>{radical.symbol}</Link>\n              </li>\n            ))}\n          </无序列表>\n        </div>\n      ))}\n    </容器>\n  );\n};\n\nconst 无序列表 = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(65px, 1fr));\n  padding: 0;\n\n  li {\n    margin-left: 2rem;\n  }\n`;\n\nexport default 首页;\n","import React from \"react\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport 主标头 from \"../../组件/主标头\";\nimport 字 from \"../../页面/字\";\nimport 字表 from \"../../页面/字表\";\nimport 未找到页面 from \"../../页面/未找到页面\";\nimport 首页 from \"../../页面/首页\";\n\nconst 程序 = () => (\n  <Router basename=\"/\">\n    <主标头 />\n    <内容>\n      <Switch>\n        <Route path=\"/\" exact component={首页} />\n        <Route path=\"/radical/:radical\" exact component={字表} />\n        <Route path=\"/character/:character\" exact component={字} />\n        <Route component={未找到页面} />\n      </Switch>\n    </内容>\n  </Router>\n);\n\nconst 内容 = styled.div`\n  padding: 2rem 0;\n`;\n\nexport default 程序;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ThemeProvider } from \"styled-components\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport 主题 from \"./核心/主题\";\nimport 程序 from \"./核心/程序\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={主题}>\n      <程序 />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}